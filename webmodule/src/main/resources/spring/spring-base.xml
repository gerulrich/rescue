<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.3.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

		<context:annotation-config />
		
		<bean id="repositoryLocator" class="net.cloudengine.dao.support.RepositoryLocator"/>
		
		<!-- MONGO REPOSITORIES -->
		
		<bean id="authTokenRepository" class="net.cloudengine.dao.mongodb.impl.MongoRepository">
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.auth.AuthenticationToken"/>
			<constructor-arg ref="mongoTemplate"/>
		</bean>
		
		<bean id="chartInfoRepository" class="net.cloudengine.dao.mongodb.impl.MongoRepository">
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.chart.ChartInfo"/>
			<constructor-arg ref="mongoTemplate"/>
		</bean>
		
		<bean id="deviceRepository" class="net.cloudengine.dao.mongodb.impl.MongoRepository">
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.gcm.RegisteredDevice"/>
			<constructor-arg ref="mongoTemplate"/>
		</bean>		
		
		<bean id="fileRepository" class="net.cloudengine.dao.mongodb.impl.MongoRepository">
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.commons.FileDescriptor"/>
			<constructor-arg ref="mongoTemplate"/>
		</bean>		

		<bean id="groupRepository" class="net.cloudengine.dao.mongodb.impl.MongoRepository">
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.auth.Group"/>
			<constructor-arg ref="mongoTemplate"/>
		</bean>

		<bean id="permissionRepository" class="net.cloudengine.dao.mongodb.impl.MongoRepository">
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.auth.Permission"/>
			<constructor-arg ref="mongoTemplate"/>
		</bean>
		
		<bean id="poiRepository" class="net.cloudengine.dao.mongodb.impl.MongoRepository">
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.geo.POI"/>
			<constructor-arg ref="mongoTemplate"/>
		</bean>		
		
		<bean id="propertyRepository" class="net.cloudengine.dao.mongodb.impl.MongoRepository">
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.config.AppProperty"></constructor-arg>
			<constructor-arg ref="mongoTemplate"/>
		</bean>
		
		<bean id="reportMetadataRepository" class="net.cloudengine.dao.mongodb.impl.MongoRepository">
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.report.ReportMetadata"/>
			<constructor-arg ref="mongoTemplate"/>
		</bean>
		
		<bean id="reportRepository" class="net.cloudengine.dao.mongodb.impl.MongoRepository">
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.report.Report"/>
			<constructor-arg ref="mongoTemplate"/>
		</bean>
		
		<bean id="roleRepository" class="net.cloudengine.dao.mongodb.impl.MongoRepository">
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.auth.Role"/>
			<constructor-arg ref="mongoTemplate"/>
		</bean>
		
		<bean id="tileRepository" class="net.cloudengine.dao.mongodb.impl.TileRepositoryImpl">
			<constructor-arg ref="mongoTemplate"/>
		</bean>		

		<bean id="tokenRepository" class="net.cloudengine.dao.mongodb.impl.TokenRepositoryImpl">
			<constructor-arg ref="mongoTemplate"/>
    	</bean>

		<bean id="userRepository" class="net.cloudengine.dao.mongodb.impl.UserRepositoryImpl">
			<constructor-arg ref="mongoTemplate"/>
		</bean>
		
		<bean id="wayPointRepository" class="net.cloudengine.dao.mongodb.impl.MongoRepository">
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.resource.WayPoint"/>
			<constructor-arg ref="mongoTemplate"/>
		</bean>

		<bean id="wfRepository" class="net.cloudengine.dao.mongodb.impl.MongoRepository">
			<constructor-arg type="java.lang.Class" value="net.cloudengine.domain.workflow.PersistentWorkflow"/>
			<constructor-arg ref="mongoTemplate"/>
		</bean>
		
		<bean id="wfProcessRepository" class="net.cloudengine.dao.mongodb.impl.MongoRepository">
			<constructor-arg type="java.lang.Class" value="net.cloudengine.domain.workflow.PersistentWorkflowProcess"/>
			<constructor-arg ref="mongoTemplate"/>
		</bean>		

		<bean class="net.cloudengine.service.impl.ConfigurationServiceImpl" autowire="byType">
			<property name="version" value="${project.version}" />
			<property name="buildNumber" value="${timestamp}"/>
			<property name="datastore" ref="propertyRepository"/>
		</bean>

		<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
			<constructor-arg ref="mongoDbFactory"></constructor-arg>
		</bean>
	
		<bean id="blobStore" class="net.cloudengine.dao.mongodb.impl.MongoBlobStore" />
		
		<bean id="appListener" class="net.cloudengine.AppListener">
			<constructor-arg ref="mongoTemplate"></constructor-arg>
		</bean>
		
		<bean class="net.cloudengine.management.Injector"/>
		
		<context:component-scan base-package="net.cloudengine.service"/>
		<context:component-scan base-package="net.cloudengine.api"/>
		<context:component-scan base-package="net.cloudengine.dao"/>
		<context:component-scan base-package="net.cloudengine.rpc"/>
		
		<bean id="mappers" class="net.cloudengine.rpc.mappers.MappersRegistry">
			<property name="mappers">
				<map>
				<!-- <entry key="" value-ref=""/> -->
				</map>
			</property>
		</bean>
		
        
	<!-- BeanPostProcessor that processes PersistenceUnit and PersistenceContext annotations, 
         for injection of the corresponding JPA resources EntityManagerFactory and EntityManager. 
        Any such annotated fields or methods in any Spring-managed object will automatically be injected.
     -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
    
    <!-- EntityManagerFactory de JPA -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
        <property name="persistenceUnitName" value="webmodule"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="database" value="${hibernate.dbtype}" />
                <property name="showSql" value="false" />
                <property name="databasePlatform" value="${hibernate.dialect}"/>
            </bean>
        </property>
    </bean>
    
	<bean id="transactionManager"
        class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>
    
	<!-- enable the configuration of transactional behavior based on annotations -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
  		<property name="dataSource" ref="dataSource"/> 
	</bean>
	
  	<jdbc:initialize-database data-source="dataSource">
  		<jdbc:script location="classpath:spring/sequence.sql" separator="$$"/>
  		<jdbc:script location="classpath:spring/sequence_table.sql"/>
      	
    </jdbc:initialize-database>
    
	<bean id="threadExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean">
  		<property name="corePoolSize" value="1" />
  		<property name="maxPoolSize" value="1" />
	</bean>
	
	<bean id="workflow.datasource" class="net.cloudengine.service.impl.WorkflowServiceImpl" autowire="byType"/>
	
	<bean id="workflow.engine" class="org.simple.workflow.services.impl.WorkflowEngineImpl">
		<property name="datasource" ref="workflow.datasource"/>
	</bean>

</beans>