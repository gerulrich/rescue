<?xml version="1.0" encoding="UTF-8"?>
<beans 
  xmlns              = "http://www.springframework.org/schema/beans"
  xmlns:xsi          = "http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:p            = "http://www.springframework.org/schema/p"
  xmlns:context      = "http://www.springframework.org/schema/context"
  xmlns:aop          = "http://www.springframework.org/schema/aop"
  xmlns:tx           = "http://www.springframework.org/schema/tx"  
  xsi:schemaLocation = "http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

		<context:annotation-config />
		
		<bean class="net.cloudengine.service.admin.ConfigurationServiceImpl" autowire="byType">
			<property name="version" value="${project.version}" />
			<property name="buildNumber" value="${timestamp}"/>
			<property name="datastore" ref="propertyStore"/>
		</bean>
		
		<bean id="morphia" class="com.google.code.morphia.Morphia"/>
		<bean id="mongoWrapper" class="net.cloudengine.web.MongoDBWrapper">
			<constructor-arg ref="mongoDbFactory"></constructor-arg>
		</bean>
	
		<bean id="userStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.auth.User"></constructor-arg>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
		
		<bean id="tileStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.map.Tile"></constructor-arg>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
	
		<bean id="tokenStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.service.auth.MongoRememberMeToken"></constructor-arg>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
		
		<bean id="propertyStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.config.AppProperty"></constructor-arg>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
		
		<bean id="fileStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.commons.FileDescriptor"/>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
		
		<bean id="poiStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.map.POI"/>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
		
		<bean id="blobStore" class="net.cloudengine.api.mongo.MongoBlobStore" />
		
		<bean id="appListener" class="net.cloudengine.AppListener">
			<constructor-arg ref="userStore"></constructor-arg>
			<constructor-arg ref="propertyStore"></constructor-arg>
		</bean>
		
		<context:component-scan base-package="net.cloudengine.service"/>
		<context:component-scan base-package="net.cloudengine.api"/>
		<context:component-scan base-package="net.cloudengine.rpc"/>
		
		<bean id="mappers" class="net.cloudengine.mappers.MappersRegistry">
<!-- 			<property name="mappers"> -->
<!-- 				<map> -->
<!-- 					<entry></entry> -->
<!-- 				</map> -->
<!-- 			</property> -->
		</bean>
		
		
		 <!-- Este bean toma propiedades de archivos properties y permite utilizar las
			  claves como atributos de otros beans. Se utiliza principalmente para los datos de 
			  conexión a la base de datos, servidores smtp, etc.
         -->
        <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
			<property name="locations">
				<list>
					<value>classpath:web.properties</value>
				</list>
			</property>
			<property name="ignoreUnresolvablePlaceholders"><value>true</value></property>
        </bean>	
        
	<!-- BeanPostProcessor that processes PersistenceUnit and PersistenceContext annotations, 
         for injection of the corresponding JPA resources EntityManagerFactory and EntityManager. 
        Any such annotated fields or methods in any Spring-managed object will automatically be injected.
     -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
    
    <!-- EntityManagerFactory de JPA -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
        <property name="persistenceUnitName" value="webmodule"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="database" value="${hibernate.dbtype}" />
                <property name="showSql" value="false" />
                <property name="databasePlatform" value="${hibernate.dialect}"/>
            </bean>
        </property>
    </bean>
    
	<bean id="transactionManager"
        class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>
    
	<!-- enable the configuration of transactional behavior based on annotations -->
    <tx:annotation-driven transaction-manager="transactionManager" />    

</beans>