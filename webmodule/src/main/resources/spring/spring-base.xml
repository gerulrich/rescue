<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

		<context:annotation-config />
		
		<bean class="net.cloudengine.service.admin.ConfigurationServiceImpl" autowire="byType">
			<property name="version" value="${project.version}" />
			<property name="buildNumber" value="${timestamp}"/>
			<property name="datastore" ref="propertyStore"/>
		</bean>
		
		<bean id="morphia" class="com.google.code.morphia.Morphia"/>
		<bean id="mongoWrapper" class="net.cloudengine.api.mongo.MongoDBWrapper" autowire="byType">
			<constructor-arg ref="mongoDbFactory"></constructor-arg>
		</bean>
	
		<bean id="roleStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"/>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.auth.Role"/>
			<constructor-arg ref="morphia"/>
		</bean>
	
		<bean id="userStore" class="net.cloudengine.api.mongo.dao.UserDaoImpl">
			<constructor-arg ref="roleStore"/>
			<constructor-arg ref="mongoWrapper"/>
			<constructor-arg ref="morphia"/>
		</bean>
		
		<bean id="tileStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.geo.Tile"></constructor-arg>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
		
		<bean id="tokenStore" class="net.cloudengine.api.mongo.dao.TokenDaoImpl">
    		<constructor-arg ref="mongoWrapper"/>
			<constructor-arg ref="morphia"/>
    	</bean>
	
		<bean id="authTokenStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"/>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.auth.AuthenticationToken"/>
			<constructor-arg ref="morphia"/>
		</bean>
		
		<bean id="propertyStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.config.AppProperty"></constructor-arg>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
		
		<bean id="fileStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.commons.FileDescriptor"/>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
		
		<bean id="poiStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.geo.POI"/>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
		
		<bean id="permissionStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.auth.Permission"/>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
		
		<bean id="wayPointStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.resource.WayPoint"/>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
		
		<bean id="groupStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.auth.Group"/>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
		
		<bean id="requestLogStore" class="net.cloudengine.api.mongo.dao.RequestLogDaoImpl">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
		
		<bean id="reportExecution" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.reports.ReportExecution"/>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
		
		<bean id="deviceStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.model.gcm.RegisteredDevice"/>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
		
		<bean id="wfStore" class="net.cloudengine.api.mongo.MongoStore">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg type="java.lang.Class" value="net.cloudengine.domain.dsl.workflow.PersistentWorkflow"/>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>		
		
		<bean id="blobStore" class="net.cloudengine.api.mongo.MongoBlobStore" />
		
		<bean id="appListener" class="net.cloudengine.AppListener">
			<constructor-arg ref="mongoWrapper"></constructor-arg>
			<constructor-arg ref="morphia"></constructor-arg>
		</bean>
		
		<bean class="net.cloudengine.management.Injector"/>
		
		<context:component-scan base-package="net.cloudengine.service"/>
		<context:component-scan base-package="net.cloudengine.api"/>
		<context:component-scan base-package="net.cloudengine.rpc"/>
		
		<bean id="mappers" class="net.cloudengine.rpc.mappers.MappersRegistry">
<!-- 			<property name="mappers"> -->
<!-- 				<map> -->
<!-- 					<entry></entry> -->
<!-- 				</map> -->
<!-- 			</property> -->
		</bean>
		
		 <!-- Este bean toma propiedades de archivos properties y permite utilizar las
			  claves como atributos de otros beans. Se utiliza principalmente para los datos de 
			  conexión a la base de datos, servidores smtp, etc.
         -->
        <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
			<property name="locations">
				<list>
					<value>classpath:web.properties</value>
				</list>
			</property>
			<property name="ignoreUnresolvablePlaceholders"><value>true</value></property>
        </bean>	
        
	<!-- BeanPostProcessor that processes PersistenceUnit and PersistenceContext annotations, 
         for injection of the corresponding JPA resources EntityManagerFactory and EntityManager. 
        Any such annotated fields or methods in any Spring-managed object will automatically be injected.
     -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
    
    <!-- EntityManagerFactory de JPA -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
        <property name="persistenceUnitName" value="webmodule"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="database" value="${hibernate.dbtype}" />
                <property name="showSql" value="false" />
                <property name="databasePlatform" value="${hibernate.dialect}"/>
            </bean>
        </property>
    </bean>
    
	<bean id="transactionManager"
        class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>
    
	<!-- enable the configuration of transactional behavior based on annotations -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
  		<property name="dataSource" ref="dataSource"/> 
	</bean>
	
  	<jdbc:initialize-database data-source="dataSource">
  		<jdbc:script location="classpath:spring/sequence_table.sql"/>
      	<jdbc:script location="classpath:spring/sequence.sql" separator="$$"/>
    </jdbc:initialize-database>
    
	<bean id="threadExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean">
  		<property name="corePoolSize" value="1" />
  		<property name="maxPoolSize" value="1" />
	</bean>
    
	<!-- bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="465" />
		<property name="username" value="gerulrich@gmail.com" />
		<property name="password" value="xxxxx" />
		<property name="protocol" value="smtps" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
				<prop key="mail.smtp.socketFactory.port">465</prop>
				<prop key="mail.debug">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean-->

</beans>